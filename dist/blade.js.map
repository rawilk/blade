{"version":3,"file":"blade.js","sources":["../resources/js/utils/isFunction.js","../resources/js/utils/object.js","../resources/js/utils/dom.js","../resources/js/directives/accordion.js","../resources/js/directives/index.js"],"sourcesContent":["export default value => typeof value === 'function';\n","/**\n * Quick object check.\n * This is primarily used to tell Objects from primitive values\n * when we know the value is a JSON-compliant type.\n *\n * Note: object could be a complex type like array, Date, etc.\n */\nexport const isObject = value => value !== null && typeof value === 'object';\n","export const isElement = el => !!(el && el.nodeType === Node.ELEMENT_NODE);\n\nexport const isTag = (el, tag) => isElement(el) && el.tagName.toLowerCase() === tag.toLowerCase();\n\nexport const hasAttr = (el, attr) => (attr && isElement(el) ? el.hasAttribute(attr) : null);\n\nexport const setAttr = (el, attribute, value) => {\n    if (attribute && isElement(el)) {\n        el.setAttribute(attribute, value);\n    }\n}\n","import isFunction from '../utils/isFunction';\nimport { isObject } from '../utils/object';\nimport { isElement, isTag, hasAttr, setAttr } from '../utils/dom';\n\nexport default function (Alpine) {\n    Alpine.directive('accordion', (el, directive) => {\n        if (! directive.value) {\n            handleRoot(el, Alpine);\n        } else if (directive.value === 'button') {\n            handleButton(el, Alpine);\n        } else if (directive.value === 'panel') {\n            handlePanel(el, Alpine);\n        } else if (directive.value === 'group') {\n            handleGroup(el, Alpine);\n        }\n    }).before('bind');\n\n    Alpine.magic('accordion', el => {\n        let data = Alpine.$data(el);\n\n        return {\n            get isOpen() { return data.__isSelected },\n            get isDisabled() { return data.__isDisabled },\n            close() { data.__close() },\n            open() { data.__open() },\n            toggle() { data.__toggle() },\n        };\n    });\n\n    Alpine.magic('accordionGroup', el => {\n        let data = Alpine.$data(el);\n\n        return {\n            selectPanel(panelEl) {\n                if (! isObject(panelEl)) {\n                    return data.__selectPanel(panelEl);\n                }\n\n                // If we receive an HTMLElement, we need to find the panel object on it.\n                if (isElement(panelEl)) {\n                    let $data = Alpine.$data(panelEl);\n\n                    $data.__panelEl && data.__selectPanel($data.__panelEl);\n\n                    return;\n                }\n\n                data.__selectPanel(panelEl);\n            },\n            closeAll() { data.__closeAll() },\n            openAll() { data.__openAll() },\n        };\n    });\n}\n\nfunction handleRoot(el, Alpine) {\n    Alpine.bind(el, {\n        'x-modelable': '$data.__isOpen',\n        'x-data'() {\n            return {\n                __isOpen: false,\n                __id: undefined,\n                __panelEl: undefined,\n                __isDisabled: false,\n\n                init() {\n                    this.__id = Alpine.bound(this.$el, 'id') ?? this.$id('blade-accordion');\n\n                    const defaultIsOpen = Boolean(Alpine.bound(this.$el, 'default-open', false));\n                    this.__panelEl = this.$el;\n                    this.__panelEl.__disabled = Alpine.bound(this.$el, 'disabled', false);\n                    this.__isDisabled = this.__panelEl.__disabled;\n\n                    this.__panelEl.__id = this.__id;\n\n                    if (defaultIsOpen) {\n                        this.__isOpen = true;\n                    }\n\n                    if (isFunction(this.$data.__addPanel)) {\n                        this.$data.__addPanel(this.$el);\n                    }\n\n                    if (this.__isOpen && isFunction(this.$data.__selectPanel) && this.__shouldSelectOnInit()) {\n                        this.$data.__selectPanel(this.$el);\n                    }\n\n                    queueMicrotask(() => {\n                        this.__panelEl.__button = this.$el.querySelector(`#${this.$data.$id('blade-accordion-button')}`);\n\n                        // We need to watch for certain DOM changes to correctly keep track of the current state.\n                        const observer = new MutationObserver(mutations => {\n                            mutations.forEach(mutation => {\n                                if (mutation.attributeName === 'disabled') {\n                                    this.__panelEl.__disabled = this.$el.hasAttribute('disabled');\n                                    this.__isDisabled = this.__panelEl.__disabled;\n                                }\n                            });\n                        });\n\n                        observer.observe(this.$el, { attributes: true });\n\n                        if (isFunction(this.$data.__selectPanel)) {\n                            queueMicrotask(() => {\n                                this.$watch('__isOpen', () => {\n                                    // We need to let our accordion group parent know that the value was\n                                    // changed externally, usually via x-model.\n                                    if (this.__isOpen !== this.__isSelected) {\n                                        this.$data.__selectPanel(this.$el);\n                                    }\n                                });\n\n                                this.$watch('__isSelected', () => {\n                                    if (this.__isSelected !== this.__isOpen) {\n                                        this.__isOpen = this.__isSelected;\n                                    }\n                                });\n                            });\n                        }\n                    });\n                },\n\n                destroy() {\n                    if (isFunction(this.$data.__destroyPanel)) {\n                        this.$data.__destroyPanel(this.$el);\n                    }\n                },\n\n                __shouldSelectOnInit() {\n                    if (this.$data.__multiple) {\n                        return true;\n                    }\n\n                    return this.$data.__active === undefined;\n                },\n\n                get __isSelected() {\n                    // If we are in a panel group, we need to check the group's active panel.\n                    if (isFunction(this.$data.__isSelectedPanel)) {\n                        return this.$data.__isSelectedPanel(this.__panelEl);\n                    }\n\n                    return this.__isOpen;\n                },\n\n                __close() {\n                    if (this.__isDisabled) {\n                        return;\n                    }\n\n                    this.__isOpen = false;\n\n                    if (isFunction(this.$data.__selectPanel)) {\n                        this.$data.__selectPanel(\n                            this.$data.__multiple ? this.__panelEl : null\n                        );\n                    }\n                },\n\n                __open() {\n                    if (this.__isDisabled) {\n                        return;\n                    }\n\n                    this.__isOpen = true;\n\n                    if (isFunction(this.$data.__selectPanel)) {\n                        this.$data.__selectPanel(this.__panelEl);\n                    }\n                },\n\n                __toggle() {\n                    if (this.__isDisabled) {\n                        return;\n                    }\n\n                    this.__isOpen = ! this.__isOpen;\n\n                    if (isFunction(this.$data.__selectPanel)) {\n                        this.$data.__selectPanel(this.__panelEl);\n                    }\n                },\n            };\n        },\n        'x-id'() { return ['blade-accordion-panel', 'blade-accordion-button'] },\n    });\n}\n\nfunction handleGroup(el, Alpine) {\n    Alpine.bind(el, {\n        'x-data'() {\n            return {\n                __active: undefined,\n                __ready: false,\n\n                // __multiple allows us to have multiple panels open at once.\n                __multiple: false,\n                __panels: [],\n\n                init() {\n                    this.__multiple = Boolean(Alpine.bound(this.$el, 'multiple', false));\n\n                    if (this.__multiple && this.__active === undefined) {\n                        this.__active = [];\n                    }\n\n                    queueMicrotask(() => {\n                        // Let our component know it's able to dispatch events.\n                        this.__ready = true;\n                    });\n                },\n\n                __enabledPanels() {\n                    return this.__panels.filter(panel => panel.isConnected && ! panel.__disabled);\n                },\n\n                __addPanel(el) {\n                    this.__panels.push(el);\n\n                    // Remove any panels that are no longer connected to the DOM.\n                    this.__panels = this.__panels.filter(panel => panel.isConnected);\n                },\n\n                __destroyPanel(el) {\n                    this.__panels.splice(this.__panels.indexOf(el), 1);\n\n                    if (! this.__multiple && this.__panels.length === 0) {\n                        this.__active = undefined;\n                    }\n                },\n\n                __selectPanel(el) {\n                    const id = isObject(el)\n                        ? el.__id\n                        : el;\n\n                    if (this.__multiple) {\n                        if (this.__active.includes(id)) {\n                            this.__dispatchEvent('accordion-close', { id });\n\n                            return this.__active.splice(this.__active.indexOf(id), 1);\n                        }\n\n                        this.__dispatchEvent('accordion-open', { id });\n\n                        return this.__active.push(id);\n                    }\n\n                    const isClosing = this.__active === id;\n                    this.__active = isClosing\n                        ? null\n                        : id;\n\n                    this.__dispatchEvent(isClosing ? 'accordion-close' : 'accordion-open', { id });\n                },\n\n                __isSelectedPanel(el) {\n                    if (this.__multiple) {\n                        return this.__active.includes(el.__id);\n                    }\n\n                    return this.__active === el.__id;\n                },\n\n                __closeAll() {\n                    this.__dispatchEvent('accordion-close-all')\n\n                    if (this.__multiple) {\n                        return this.__active = [];\n                    }\n\n                    this.__active = null;\n                },\n\n                __openAll() {\n                    this.__enabledPanels().forEach(panel => {\n                        if (this.__multiple) {\n                            ! this.__active.includes(panel.__id) && this.__active.push(panel.__id);\n\n                            return;\n                        }\n\n                        this.__active = panel.__id;\n                    });\n\n                    this.__dispatchEvent('accordion-open-all');\n                },\n\n                __dispatchEvent(name, detail = {}) {\n                    this.__ready && this.$dispatch(name, detail);\n                },\n\n                // Handle keyboard navigation.\n                __focusNext(panelEl) {\n                    const enabledPanels = this.__enabledPanels();\n                    const currentIndex = enabledPanels.indexOf(panelEl);\n                    let nextIndex = (currentIndex + 1) >= enabledPanels.length\n                        ? 0\n                        : currentIndex + 1;\n\n                    this.__focusPanel(enabledPanels, nextIndex);\n                },\n\n                __focusPrev(panelEl) {\n                    const enabledPanels = this.__enabledPanels();\n                    const currentIndex = enabledPanels.indexOf(panelEl);\n                    let prevIndex = (currentIndex - 1) < 0\n                        ? enabledPanels.length - 1\n                        : currentIndex - 1;\n\n                    this.__focusPanel(enabledPanels, prevIndex);\n                },\n\n                __focusFirst() {\n                    this.__focusPanel(this.__enabledPanels(), 0);\n                },\n\n                __focusLast() {\n                    const enabledPanels = this.__enabledPanels();\n                    this.__focusPanel(enabledPanels, enabledPanels.length - 1);\n                },\n\n                __focusPanel(panels, index) {\n                    const panel = panels[index];\n\n                    panel?.__button && panel.__button.focus();\n                },\n            };\n        },\n    });\n}\n\nfunction handleButton(el, Alpine) {\n    Alpine.bind(el, {\n        'x-init'() {\n            const isButton = isTag(this.$el, 'button');\n\n            if (isButton && ! hasAttr(this.$el, 'type')) {\n                setAttr(this.$el, 'type', 'button');\n            } else if (! isButton && ! hasAttr(this.$el, 'role')) {\n                setAttr(this.$el, 'role', 'button');\n            }\n        },\n        ':tabindex'() {\n            if (isTag(this.$el, 'button')) {\n                return null;\n            }\n\n            return this.$data.__isDisabled ? null : 0;\n        },\n        // We give an ID here because we can't rely on x-refs because of how the component is structured.\n        ':id'() { return this.$data.$id('blade-accordion-button') },\n        '@click'() { this.$data.__toggle() },\n        ':aria-expanded'() { return this.$data.__isSelected },\n        ':aria-controls'() { return this.$data.$id('blade-accordion-panel') },\n        ':disabled'() { return this.$data.__isDisabled },\n        '@keydown.space.prevent.stop'() { this.$data.__toggle() },\n        '@keydown.enter.prevent.stop'() { this.$data.__toggle() },\n        '@keydown.arrow-down'(e) {\n            // We only need to handle this when in a group.\n            if (isFunction(this.$data.__focusNext)) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                return this.$data.__focusNext(this.$data.__panelEl);\n            }\n        },\n        '@keydown.arrow-up'(e) {\n            // We only need to handle this when in a group.\n            if (isFunction(this.$data.__focusPrev)) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                return this.$data.__focusPrev(this.$data.__panelEl);\n            }\n        },\n        '@keydown.home'(e) {\n            // We only need to handle this when in a group.\n            if (isFunction(this.$data.__focusFirst)) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                return this.$data.__focusFirst();\n            }\n        },\n        '@keydown.end'(e) {\n            // We only need to handle this when in a group.\n            if (isFunction(this.$data.__focusLast)) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                return this.$data.__focusLast();\n            }\n        },\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        '@keyup.space.prevent'() {},\n    });\n}\n\nfunction handlePanel(el, Alpine) {\n    Alpine.bind(el, {\n        'x-show'() {\n            return this.$accordion.isOpen;\n        },\n        'x-init'() {\n            // Handle an edge case where the panel is supposed to be initially open, but x-collapse is not allowing it to be shown.\n            // This usually happens when dynamically adding panels to the DOM in livewire.\n            if (this.$accordion.isOpen && hasAttr(this.$el, 'x-collapse') && hasAttr(this.$el, 'hidden')) {\n                this.$el.removeAttribute('hidden');\n                this.$el.style.height = 'auto';\n                this.$el.style.overflow = null;\n            }\n        },\n        ':id'() {\n            return this.$data.$id('blade-accordion-panel');\n        },\n    });\n}\n","import accordion from './accordion';\n\ndocument.addEventListener('alpine:init', () => {\n    accordion(Alpine);\n});\n"],"names":["isFunction","value","isObject","_typeof","isElement","el","nodeType","Node","ELEMENT_NODE","isTag","tag","tagName","toLowerCase","hasAttr","attr","hasAttribute","setAttr","attribute","setAttribute","accordion","Alpine","directive","bind","isButton","this","$el","$data","__isDisabled","$id","__toggle","__isSelected","e","__focusNext","preventDefault","stopPropagation","__panelEl","__focusPrev","__focusFirst","__focusLast","handleButton","$accordion","isOpen","removeAttribute","style","height","overflow","handlePanel","__active","undefined","__ready","__multiple","__panels","init","_this2","Boolean","bound","queueMicrotask","__enabledPanels","filter","panel","isConnected","__disabled","__addPanel","push","__destroyPanel","splice","indexOf","length","__selectPanel","id","__id","includes","__dispatchEvent","isClosing","__isSelectedPanel","__closeAll","__openAll","_this3","forEach","name","detail","arguments","$dispatch","panelEl","enabledPanels","currentIndex","nextIndex","__focusPanel","prevIndex","panels","index","__button","focus","handleGroup","__isOpen","_Alpine$bound","_this","defaultIsOpen","__shouldSelectOnInit","querySelector","concat","MutationObserver","mutations","mutation","attributeName","observe","attributes","$watch","destroy","__close","__open","handleRoot","before","magic","data","isDisabled","close","open","toggle","selectPanel","closeAll","openAll","document","addEventListener"],"mappings":"6GAAA,IAAAA,WAAA,SAAeC,OAAK,MAAqB,mBAAVA,KAAoB,4QCO5C,IAAMC,SAAW,SAAAD,OAAK,OAAc,OAAVA,OAAmC,WAAjBE,QAAOF,MAAkB,ECP/DG,UAAY,SAAAC,IAAE,SAAOA,IAAMA,GAAGC,WAAaC,KAAKC,aAAa,EAE7DC,MAAQ,SAACJ,GAAIK,KAAG,OAAKN,UAAUC,KAAOA,GAAGM,QAAQC,gBAAkBF,IAAIE,aAAa,EAEpFC,QAAU,SAACR,GAAIS,MAAI,OAAMA,MAAQV,UAAUC,IAAMA,GAAGU,aAAaD,MAAQ,IAAI,EAE7EE,QAAU,SAACX,GAAIY,UAAWhB,OAC/BgB,WAAab,UAAUC,KACvBA,GAAGa,aAAaD,UAAWhB,MAEnC,ECNe,SAAAkB,UAAUC,QACrBA,OAAOC,UAAU,aAAa,SAAChB,GAAIgB,WACzBA,UAAUpB,MAEe,WAApBoB,UAAUpB,MAoU7B,SAAsBI,GAAIe,QACtBA,OAAOE,KAAKjB,GAAI,CACZ,SAAQ,WACJ,IAAMkB,SAAWd,MAAMe,KAAKC,IAAK,UAE7BF,WAAcV,QAAQW,KAAKC,IAAK,QAChCT,QAAQQ,KAAKC,IAAK,OAAQ,UACjBF,UAAcV,QAAQW,KAAKC,IAAK,SACzCT,QAAQQ,KAAKC,IAAK,OAAQ,SAEjC,EACD,YAAW,WACP,OAAIhB,MAAMe,KAAKC,IAAK,WAIbD,KAAKE,MAAMC,aAHP,KAG6B,CAC3C,EAED,MAAK,WAAK,OAAOH,KAAKE,MAAME,IAAI,yBAA2B,EAC3D,SAAQ,WAAKJ,KAAKE,MAAMG,UAAY,EACpC,iBAAgB,WAAK,OAAOL,KAAKE,MAAMI,YAAc,EACrD,iBAAgB,WAAK,OAAON,KAAKE,MAAME,IAAI,wBAA0B,EACrE,YAAW,WAAK,OAAOJ,KAAKE,MAAMC,YAAc,EAChD,8BAA6B,WAAKH,KAAKE,MAAMG,UAAY,EACzD,8BAA6B,WAAKL,KAAKE,MAAMG,UAAY,EACzD,sBAAqB,SAACE,GAElB,GAAI/B,WAAWwB,KAAKE,MAAMM,aAItB,OAHAD,EAAEE,iBACFF,EAAEG,kBAEKV,KAAKE,MAAMM,YAAYR,KAAKE,MAAMS,UAEhD,EACD,oBAAmB,SAACJ,GAEhB,GAAI/B,WAAWwB,KAAKE,MAAMU,aAItB,OAHAL,EAAEE,iBACFF,EAAEG,kBAEKV,KAAKE,MAAMU,YAAYZ,KAAKE,MAAMS,UAEhD,EACD,gBAAe,SAACJ,GAEZ,GAAI/B,WAAWwB,KAAKE,MAAMW,cAItB,OAHAN,EAAEE,iBACFF,EAAEG,kBAEKV,KAAKE,MAAMW,cAEzB,EACD,eAAc,SAACN,GAEX,GAAI/B,WAAWwB,KAAKE,MAAMY,aAItB,OAHAP,EAAEE,iBACFF,EAAEG,kBAEKV,KAAKE,MAAMY,aAEzB,EAID,uBAAsB,WAAI,GAElC,CAtYYC,CAAalC,GAAIe,QACU,UAApBC,UAAUpB,MAuY7B,SAAqBI,GAAIe,QACrBA,OAAOE,KAAKjB,GAAI,CACZ,SAAQ,WACJ,OAAOmB,KAAKgB,WAAWC,MAC1B,EACD,SAAQ,WAGAjB,KAAKgB,WAAWC,QAAU5B,QAAQW,KAAKC,IAAK,eAAiBZ,QAAQW,KAAKC,IAAK,YAC/ED,KAAKC,IAAIiB,gBAAgB,UACzBlB,KAAKC,IAAIkB,MAAMC,OAAS,OACxBpB,KAAKC,IAAIkB,MAAME,SAAW,KAEjC,EACD,MAAK,WACD,OAAOrB,KAAKE,MAAME,IAAI,wBAC1B,GAER,CAxZYkB,CAAYzC,GAAIe,QACW,UAApBC,UAAUpB,OAgL7B,SAAqBI,GAAIe,QACrBA,OAAOE,KAAKjB,GAAI,CACZ,SAAQ,WACJ,MAAO,CACH0C,cAAUC,EACVC,SAAS,EAGTC,YAAY,EACZC,SAAU,GAEVC,KAAI,WAAG,IAAAC,OAAA7B,KACHA,KAAK0B,WAAaI,QAAQlC,OAAOmC,MAAM/B,KAAKC,IAAK,YAAY,IAEzDD,KAAK0B,iBAAgCF,IAAlBxB,KAAKuB,WACxBvB,KAAKuB,SAAW,IAGpBS,gBAAe,WAEXH,OAAKJ,SAAU,CACnB,GACH,EAEDQ,gBAAe,WACX,OAAOjC,KAAK2B,SAASO,QAAO,SAAAC,OAAK,OAAIA,MAAMC,cAAiBD,MAAME,aACrE,EAEDC,WAAU,SAACzD,IACPmB,KAAK2B,SAASY,KAAK1D,IAGnBmB,KAAK2B,SAAW3B,KAAK2B,SAASO,QAAO,SAAAC,OAAK,OAAIA,MAAMC,cACvD,EAEDI,eAAc,SAAC3D,IACXmB,KAAK2B,SAASc,OAAOzC,KAAK2B,SAASe,QAAQ7D,IAAK,GAE1CmB,KAAK0B,YAAuC,IAAzB1B,KAAK2B,SAASgB,SACnC3C,KAAKuB,cAAWC,EAEvB,EAEDoB,cAAa,SAAC/D,IACV,IAAMgE,GAAKnE,SAASG,IACdA,GAAGiE,KACHjE,GAEN,GAAImB,KAAK0B,WACL,OAAI1B,KAAKuB,SAASwB,SAASF,KACvB7C,KAAKgD,gBAAgB,kBAAmB,CAAEH,GAAAA,KAEnC7C,KAAKuB,SAASkB,OAAOzC,KAAKuB,SAASmB,QAAQG,IAAK,KAG3D7C,KAAKgD,gBAAgB,iBAAkB,CAAEH,GAAAA,KAElC7C,KAAKuB,SAASgB,KAAKM,KAG9B,IAAMI,UAAYjD,KAAKuB,WAAasB,GACpC7C,KAAKuB,SAAW0B,UACV,KACAJ,GAEN7C,KAAKgD,gBAAgBC,UAAY,kBAAoB,iBAAkB,CAAEJ,GAAAA,IAC5E,EAEDK,kBAAiB,SAACrE,IACd,OAAImB,KAAK0B,WACE1B,KAAKuB,SAASwB,SAASlE,GAAGiE,MAG9B9C,KAAKuB,WAAa1C,GAAGiE,IAC/B,EAEDK,WAAU,WAGN,GAFAnD,KAAKgD,gBAAgB,uBAEjBhD,KAAK0B,WACL,OAAO1B,KAAKuB,SAAW,GAG3BvB,KAAKuB,SAAW,IACnB,EAED6B,UAAS,WAAG,IAAAC,OAAArD,KACRA,KAAKiC,kBAAkBqB,SAAQ,SAAAnB,OACvBkB,OAAK3B,YACH2B,OAAK9B,SAASwB,SAASZ,MAAMW,OAASO,OAAK9B,SAASgB,KAAKJ,MAAMW,MAKrEO,OAAK9B,SAAWY,MAAMW,IAC1B,IAEA9C,KAAKgD,gBAAgB,qBACxB,EAEDA,gBAAe,SAACO,MAAmB,IAAbC,OAAMC,UAAAd,OAAA,QAAAnB,IAAAiC,UAAA,GAAAA,UAAA,GAAG,CAAA,EAC3BzD,KAAKyB,SAAWzB,KAAK0D,UAAUH,KAAMC,OACxC,EAGDhD,YAAW,SAACmD,SACR,IAAMC,cAAgB5D,KAAKiC,kBACrB4B,aAAeD,cAAclB,QAAQiB,SACvCG,UAAaD,aAAe,GAAMD,cAAcjB,OAC9C,EACAkB,aAAe,EAErB7D,KAAK+D,aAAaH,cAAeE,UACpC,EAEDlD,YAAW,SAAC+C,SACR,IAAMC,cAAgB5D,KAAKiC,kBACrB4B,aAAeD,cAAclB,QAAQiB,SACvCK,UAAaH,aAAe,EAAK,EAC/BD,cAAcjB,OAAS,EACvBkB,aAAe,EAErB7D,KAAK+D,aAAaH,cAAeI,UACpC,EAEDnD,aAAY,WACRb,KAAK+D,aAAa/D,KAAKiC,kBAAmB,EAC7C,EAEDnB,YAAW,WACP,IAAM8C,cAAgB5D,KAAKiC,kBAC3BjC,KAAK+D,aAAaH,cAAeA,cAAcjB,OAAS,EAC3D,EAEDoB,aAAYA,SAACE,OAAQC,OACjB,IAAM/B,MAAQ8B,OAAOC,QAErB/B,iBAAK,EAALA,MAAOgC,WAAYhC,MAAMgC,SAASC,OACtC,EAER,GAER,CA7TYC,CAAYxF,GAAIe,QA0C5B,SAAoBf,GAAIe,QACpBA,OAAOE,KAAKjB,GAAI,CACZ,cAAe,iBACf,SAAQ,WACJ,MAAO,CACHyF,UAAU,EACVxB,UAAMtB,EACNb,eAAWa,EACXrB,cAAc,EAEdyB,KAAI,WAAG,IAAA2C,cAAAC,MAAAxE,KACHA,KAAK8C,KAAmCyB,QAA/BA,cAAG3E,OAAOmC,MAAM/B,KAAKC,IAAK,aAAKsE,IAAAA,cAAAA,cAAIvE,KAAKI,IAAI,mBAErD,IAAMqE,cAAgB3C,QAAQlC,OAAOmC,MAAM/B,KAAKC,IAAK,gBAAgB,IACrED,KAAKW,UAAYX,KAAKC,IACtBD,KAAKW,UAAU0B,WAAazC,OAAOmC,MAAM/B,KAAKC,IAAK,YAAY,GAC/DD,KAAKG,aAAeH,KAAKW,UAAU0B,WAEnCrC,KAAKW,UAAUmC,KAAO9C,KAAK8C,KAEvB2B,gBACAzE,KAAKsE,UAAW,GAGhB9F,WAAWwB,KAAKE,MAAMoC,aACtBtC,KAAKE,MAAMoC,WAAWtC,KAAKC,KAG3BD,KAAKsE,UAAY9F,WAAWwB,KAAKE,MAAM0C,gBAAkB5C,KAAK0E,wBAC9D1E,KAAKE,MAAM0C,cAAc5C,KAAKC,KAGlC+B,gBAAe,WACXwC,MAAK7D,UAAUwD,SAAWK,MAAKvE,IAAI0E,kBAAaC,OAAKJ,MAAKtE,MAAME,IAAI,4BAGnD,IAAIyE,kBAAiB,SAAAC,WAClCA,UAAUxB,SAAQ,SAAAyB,UACiB,aAA3BA,SAASC,gBACTR,MAAK7D,UAAU0B,WAAamC,MAAKvE,IAAIV,aAAa,YAClDiF,MAAKrE,aAAeqE,MAAK7D,UAAU0B,WAE3C,GACJ,IAES4C,QAAQT,MAAKvE,IAAK,CAAEiF,YAAY,IAErC1G,WAAWgG,MAAKtE,MAAM0C,gBACtBZ,gBAAe,WACXwC,MAAKW,OAAO,YAAY,WAGhBX,MAAKF,WAAaE,MAAKlE,cACvBkE,MAAKtE,MAAM0C,cAAc4B,MAAKvE,IAEtC,IAEAuE,MAAKW,OAAO,gBAAgB,WACpBX,MAAKlE,eAAiBkE,MAAKF,WAC3BE,MAAKF,SAAWE,MAAKlE,aAE7B,GACJ,GAER,GACH,EAED8E,QAAO,WACC5G,WAAWwB,KAAKE,MAAMsC,iBACtBxC,KAAKE,MAAMsC,eAAexC,KAAKC,IAEtC,EAEDyE,qBAAoB,WAChB,QAAI1E,KAAKE,MAAMwB,iBAIgBF,IAAxBxB,KAAKE,MAAMqB,QACrB,EAEGjB,mBAEA,OAAI9B,WAAWwB,KAAKE,MAAMgD,mBACflD,KAAKE,MAAMgD,kBAAkBlD,KAAKW,WAGtCX,KAAKsE,QACf,EAEDe,QAAO,WACCrF,KAAKG,eAITH,KAAKsE,UAAW,EAEZ9F,WAAWwB,KAAKE,MAAM0C,gBACtB5C,KAAKE,MAAM0C,cACP5C,KAAKE,MAAMwB,WAAa1B,KAAKW,UAAY,MAGpD,EAED2E,OAAM,WACEtF,KAAKG,eAITH,KAAKsE,UAAW,EAEZ9F,WAAWwB,KAAKE,MAAM0C,gBACtB5C,KAAKE,MAAM0C,cAAc5C,KAAKW,WAErC,EAEDN,SAAQ,WACAL,KAAKG,eAITH,KAAKsE,UAAatE,KAAKsE,SAEnB9F,WAAWwB,KAAKE,MAAM0C,gBACtB5C,KAAKE,MAAM0C,cAAc5C,KAAKW,WAEtC,EAEP,EACD,OAAM,WAAK,MAAO,CAAC,wBAAyB,yBAA0B,GAE9E,CAnLY4E,CAAW1G,GAAIe,OAQvB,IAAG4F,OAAO,QAEV5F,OAAO6F,MAAM,aAAa,SAAA5G,IACtB,IAAI6G,KAAO9F,OAAOM,MAAMrB,IAExB,MAAO,CACCoC,aAAW,OAAOyE,KAAKpF,YAAc,EACrCqF,iBAAe,OAAOD,KAAKvF,YAAc,EAC7CyF,MAAK,WAAKF,KAAKL,SAAW,EAC1BQ,KAAI,WAAKH,KAAKJ,QAAU,EACxBQ,OAAM,WAAKJ,KAAKrF,UAAW,EAEnC,IAEAT,OAAO6F,MAAM,kBAAkB,SAAA5G,IAC3B,IAAI6G,KAAO9F,OAAOM,MAAMrB,IAExB,MAAO,CACHkH,YAAW,SAACpC,SACR,IAAMjF,SAASiF,SACX,OAAO+B,KAAK9C,cAAce,SAI9B,GAAI/E,UAAU+E,SAAd,CACI,IAAIzD,MAAQN,OAAOM,MAAMyD,SAEzBzD,MAAMS,WAAa+E,KAAK9C,cAAc1C,MAAMS,UAGhD,MAEA+E,KAAK9C,cAAce,QACtB,EACDqC,SAAQ,WAAKN,KAAKvC,YAAc,EAChC8C,QAAO,WAAKP,KAAKtC,WAAY,EAErC,GACJ,CCnDA8C,SAASC,iBAAiB,eAAe,WACrCxG,UAAUC,OACd"}